#Add a decription of what this is for.

AWSTemplateFormatVersion: 2010-09-09
Description: Create a VPC Network with subnets, ec2 hosts configured with Security groups and other resources to interact.
Resources:
  myVPC:
    Type: 'AWS::EC2::VPC'
    Properties: 
      CidrBlock: 10.0.0.0/16
      EnableDnsSupport: 'true'  #AWS will resolved DNS hostnames to any instance within the VPCs IP address.
      EnableDnsHostName: 'true' #Instances get allocated DNS hostnames by default
      Tags:
       - Key: Environment
         Value: Production
       - Key: Owner
         Value: Samantha
       - Type:
         Value: Production-VPC

#Public Subnet A
  PublicSubnetA:
    Type: 'AWS::EC2::Subnet'
    Properties: 
      VpcId: 
        Ref: myVPC
      CidrBlock: 10.0.1.0/24
      AvailabilityZone: "us-east-1b"
      MapPublicIpOnLaunch: true
      Tags:
      - Key: Environment
        Value: production
      - Key: Owner
        Value: Samantha
      - Type:
        Value: Public-Subnet-A

#Public Subnet B
  PublicSubnetB:
    Type: 'AWS::EC2::Subnet'
    Properties: 
      VpcId: 
        Ref: myVPC
      CidrBlock: 10.0.2.0/24
      AvailabilityZone: "us-east-1b"
      MapPublicIpOnLaunch: true
      Tags:
      - Key: Environment
        Value: production
      - Key: Owner
        Value: Samantha
      - Type:
        Value: Public-Subnet-B
    
    
#Private Subnet A
  PrivateSubnetA:
    Type: AWS::EC2::Subnet
    Properties: 
      VpcId: 
        Ref: myVPC
      CidrBlock: 10.0.3.0/24
      AvailabilityZone: "us-east-1b"
      Tags:
      - Key: Environment
        Value: production
      - Key: Owner
        Value: Samantha
      - Type:
        Value: Private-Subnet-A

#Private Subnet B
  PrivateSubnetB:
    Type: AWS::EC2::Subnet
    Properties: 
      VpcId: 
        Ref: myVPC
      CidrBlock: 10.0.4.0/24
      AvailabilityZone: "us-east-1b"
      Tags:
      - Key: Environment
        Value: production
      - Key: Owner
        Value: Samantha
      - Type:
        Value: Private-Subnet-B

#Network Routing
  #Internet Gateway
  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      - Key: Environment
        Value: production
      - Key: Owner
        Value: Samantha
      - Type:
        Value: Internet-Gateway

  #Gateway to Internet
  GatewayToInternet:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref myVPC
      InternetGatewayId: !Ref InternetGateway
    
######## Public Routing ########
#Public Route Table
  PublicRouteTable:
    Type: 'AWS::EC2::RouteTable'
    DependsOn: GatewayToInternet
    Properties: 
      VpcId: !Ref myVPC

#Public Carrier Route
  PublicCarrierRoute:
    Type: AWS::EC2::Route
    DependsOn: GatewayToInternet
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway


  PublicSubnetRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet
      RouteTableId: !Ref PublicRouteTable

######## NAT Gateway Configuration ########
  NATGateway:
    Type: 'AWS::EC2::NatGateway'
    Properties: 
      AllocationId: !GetAtt NATGatewayEIP.AllocationId
      SubnetId: !Ref PublicSubnet
      Tags:
      - Key: Enviroment
        Value: production
      - Key: Owner
        Value: Samantha
      - Key: Type
        Value: Production-VPC

  
  NATGatewayEIP:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc
    
  RouteNATGateway:
    DependsOn: NATGateway
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      DestinationCidrBlock: '0.0.0.0/0'
      NatGatewayId: !Ref NATGateway

######## Private Routing ########
#Private Route Table:
  PrivateRouteTable:
    Type: 'AWS::EC2::RouteTable'
    Properties: 
      VpcId: !Ref myVPC

#Private Carrier Route
  PrivateCarrierRoute:
    Type: AWS::EC2::Route
    Properties:
      NatGatewayId: !Ref NatGateway
      RouteTableId: !Ref PrivateRouteTable
      DestinationCidrBlock: 0.0.0.0/0

  PrivateSubnetRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnet
      RouteTableId: !Ref PrivateRouteTable

####### Resources Creation ########
#JumpBox Server Creation
  JumpBoxInstance:
    Type: AWS::EC2::Instance
    Properties:
      ImageId: ami-0d5eff06f840b45e9 # ImageID valid only in us-east-1 region
      InstanceType: t2.micro
      SecurityGroupIds:
        - !Ref JumpBoxSecurityGroup
      NetworkInterfaces:
        - SubnetId: !Ref PublicSubnetA

  JumpBoxSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Join ["-", [JumpBox-security-group, dev]]
      GroupDescription: "Allow HTTP/HTTPS and SSH inbound and outbound traffic - Managed by CloudFormation"
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0

#AppInstance Server Creation
  AppInstance:
    Type: 'AWS::EC2::Instance'
    Properties:
      ImageId: ami-0d5eff06f840b45e9 # ImageID valid only in us-east-1 region
      InstanceType: t2.micro
      NetworkInterfaces:
        - SubnetId: !Ref PrivateSubnet
      SecurityGroupIds:
        - !Ref AppInstanceSecurityGroup

# AppInstance Security Group References
  AppInstanceSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupName: !Join ["-", [AppInstance-security-group, dev]]
      GroupDescription: Allow HTTP/HTTPS and SSH inbound traffic - managed by CloudFormation.
      SecurityGroupIngress:
          IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          SourceSecurityGroupId:
            ref: JumpBoxSG

#WebApp Server Creation
  WebAppInstance:
    Type: AWS::EC2::Instance
    Properties:
      ImageId: ami-0d5eff06f840b45e9 # ImageID valid only in us-east-1 region
      InstanceType: t2.micro
      SecurityGroupIds:
        - !Ref WebAppSecurityGroup
      NetworkInterfaces:
        - SubnetId: !Ref PublicSubnetB

  WebAppSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Join ["-", [WebApp-security-group, dev]]
      GroupDescription: "Allow outbound traffic via HTTPS - Managed by CloudFormation"
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0

######## Aurora RDS Configuration ###########
  RDSCluster: 
    Properties: 
      DBClusterParameterGroupName: 
        Ref: RDSDBClusterParameterGroup
      DBSubnetGroupName: 
        Ref: PrivateSubnetB
      Engine: aurora
      MasterUserPassword: 
        Ref: password
      MasterUsername: 
        Ref: username
    Type: "AWS::RDS::DBCluster"
  RDSDBClusterParameterGroup: 
    Properties: 
      Description: "CloudFormation Sample Aurora Cluster Parameter Group"
      Family: aurora5.7 #5.6 EOL Feb 2023
      Parameters: 
        time_zone: US/Eastern
    Type: "AWS::RDS::DBClusterParameterGroup"
  RDSDBInstance1: 
    Properties: 
      DBClusterIdentifier: 
        Ref: RDSCluster
      DBInstanceClass: db.t2.micro 
      DBParameterGroupName: 
        Ref: RDSDBParameterGroup
      DBSubnetGroupName: 
        Ref: PrivateSubnetB
      Engine: aurora
    Type: "AWS::RDS::DBInstance"
  RDSDBParameterGroup:
    Type: 'AWS::RDS::DBParameterGroup'
    Properties:
      Description: CloudFormation Sample Aurora Parameter Group
      Family: aurora5.7  #5.6 EOL Feb 2023
      Parameters:
        sql_mode: IGNORE_SPACE
        max_allowed_packet: 1024
        innodb_buffer_pool_size: '{DBInstanceClassMemory*3/4}'
