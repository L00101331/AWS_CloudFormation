#Add a decription of what this is for.

AWSTemplateFormatVersion: 2010-09-09
Description: Create a VPC Network with subnets, ec2 hosts configured with Security groups and other resources to interact.
Resources:
  myVPC:
    Type: 'AWS::EC2::VPC'
    Properties: 
      CidrBlock: 10.0.0.0/16
      EnableDnsSupport: 'true'  #AWS will resolved DNS hostnames to any instance within the VPCs IP address.
      EnableDnsHostName: 'true' #Instances get allocated DNS hostnames by default
      Tags:
       - Key: Environment
         Value: Production
       - Key: Owner
         Value: Samantha
       - Type:
         Value: Production-VPC

#One Public Subnet
  PublicSubnet:
    Type: 'AWS::EC2::Subnet'
    Properties: 
      VpcId: 
        Ref: myVPC
      CidrBlock: 10.0.1.0/24
      AvailabilityZone: "us-east-1b"
      MapPublicIpOnLaunch: true
      Tags:
      - Key: Environment
        Value: production
      - Key: Owner
        Value: Samantha
      - Type:
        Value: Public-Subnet
    
#One Private Subnet
  PrivateSubnet:
    Type: 'AWS::EC2::Subnet'
    Properties: 
      VpcId: 
        Ref: myVPC
      CidrBlock: 10.0.2.0/24
      AvailabilityZone: "us-east-1b"
      Tags:
      - Key: Environment
        Value: production
      - Key: Owner
        Value: Samantha
      - Type:
        Value: Public-Subnet

#JumpBox Server Creation
  JumpBox:
    Type: 'AWS::EC2::Instance'
    Properties: 
    ImageId: ami-0d5eff06f840b45e9
    InstanceType: t2.micro
      NetworkInterfaces:
        - SubnetId: !Ref PublicSubnet
    SecurityGroupIds:
       - !Ref JumpBoxSG

#AppInstance Server Creation
  AppInstance:
    Type: 'AWS::EC2::Instance'
    Properties:
    ImageId: ami-0d5eff06f840b45e9
    InstanceType: t2.micro
      NetworkInterfaces:
        - SubnetId: !Ref PrivateSubnet
      SecurityGroupIds:
        - !Ref AppInstanceSG

# JumpBox Security Group References
  JumpBoxSG:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupName: !Join ["-", [JumpBoxSG]]
      GroupDescription: Allow HTTP/HTTPS and SSH outbound traffic - managed by CloudFormation.
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: null

# AppInstance Security Group References
  AppInstanceSG:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupName: !Join ["-", [AppInstanceSG]]
      GroupDescription: App Instance SG belonging to the app server - managed by Cloudformation.
      SecurityGroupIngress:
          IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          SourceSecurityGroupId:
            ref: JumpBoxSG

#Network Routing
  #Internet Gateway
  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      - Key: Environment
        Value: production
      - Key: Owner
        Value: Samantha
      - Type:
        Value: Internet-Gateway

  #Gateway to Internet
  GatewayToInternet:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref myVPC
      InternetGatewayId: !Ref InternetGateway
    
######## Public Routing ########
#Public Route Table
  PublicRouteTable:
    Type: 'AWS::EC2::RouteTable'
    DependsOn: GatewayToInternet
    Properties: 
      VpcId: !Ref myVPC

#Public Carrier Route
  PublicCarrierRoute:
    Type: AWS::EC2::Route
    DependsOn: GatewayToInternet
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway


  PublicSubnetRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet
      RouteTableId: !Ref PublicRouteTable

######## NAT Gateway Configuration ########
  NATGateway:
    Type: 'AWS::EC2::NatGateway'
    Properties: 
      AllocationId: !GetAtt NATGatewayEIP.AllocationId
      SubnetId: !Ref PublicSubnet
      Tags:
      - Key: Enviroment
        Value: production
       - Key: Owner
         Value: Samantha
       - Type:
         Value: Production-VPC

  
  NATGatewayEIP:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc
    
  RouteNATGateway:
    DependsOn: NATGateway
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      DestinationCidrBlock: '0.0.0.0/0'
      NatGatewayId: !Ref NATGateway

######## Private Routing ########
#Private Route Table:
  PrivateRouteTable:
    Type: 'AWS::EC2::RouteTable'
    Properties: 
      VpcId: !Ref myVPC

#Private Carrier Route
  PrivateCarrierRoute:
    Type: AWS::EC2::Route
    Properties:
      NatGatewayId: !Ref NatGateway
      RouteTableId: !Ref PrivateRouteTable
      DestinationCidrBlock: 0.0.0.0/0

  PrivateSubnetRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnet
      RouteTableId: !Ref PrivateRouteTable